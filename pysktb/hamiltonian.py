#    ____            ____    _  __  _____   ____
#   |  _ \   _   _  / ___|  | |/ / |_   _| | __ )
#   | |_) | | | | | \___ \  | ' /    | |   |  _ \
#   |  __/  | |_| |  ___) | | . \    | |   | |_) |
#   |_|      \__, | |____/  |_|\_\   |_|   |____/
#            |___/
#
#
# by Santosh Kumar Radha,
# srr70@case.edu
# Inspired by various codes
# Used for solving Slater Koster Tightbinding
# hameltonians.
#
# =============================================
__version__ = "0.5"
import numpy as np
from copy import deepcopy
import multiprocessing
from joblib import Parallel, delayed
from .jit_modules import get_gmat_jit
from .utils import energitics

try:
    from scipy.linalg import block_diag, eigh
    from scipy import sparse

    scipy = 1
except ImportError:
    print(
        "scipy is not installed; defaulting to numpy (please install scipy for speed improvements)"
    )

# Initial configuration
# TODO: Move this to a separate comfig file
scipy = False
numba = True


from ._params import get_hop_int
from .system import System
from .atom import Atom
from .lattice import Lattice
from .structure import Structure


def parallel_solove_eval(k, ham1, soc):
    ham = ham1.get_ham(k, l_soc=soc)
    eval = ham1._sol_ham(ham, eig_vectors=False)
    return eval[:]


def parallel_solove_eval_and_evec(k, ham1, soc):
    ham = ham1.get_ham(k, l_soc=soc)
    (eval, evec) = ham1._sol_ham(ham, eig_vectors=True)
    return eval, evec


class Hamiltonian(object):
    E_PREFIX = "e_"

    def __init__(self, structure, inter, numba=1):

        self.structure = structure
        self.inter = inter
        t = {}
        for i in self.structure.atoms:
            t[i.element] = i.orbitals

        self.system = System(self.structure, t, self.inter)
        self.n_orbitals = len(self.system.all_orbitals)
        self.H_wo_g = np.zeros(
            (self.system.structure.max_image, self.n_orbitals, self.n_orbitals), dtype=complex
        )
        self.calc_ham_wo_k()
        self.soc_mat = self.system.get_soc_mat()
        self.dist_mat_vec = self.system.structure.dist_mat_vec
        self.bond_mat = self.system.structure.bond_mat
        self.numba = numba
        self.orbital_order = self._orbital_order()

    @staticmethod
    def get_orb_ind(orbit):
        return Atom.ORBITALS_ALL.index(orbit)

    def _orbital_order(self):
        """returns the orbital ordering in the hameltonian
		"""
        orbs = dict()
        order = 0
        for i in self.system.all_orbitals:
            orbs[order] = i[0] + "-" + i[1] + "-up"
            order += 1
            orbs[order] = i[0] + "-" + i[1] + "-down"
            order += 1
        return orbs

    def get_ham(self, kpt, l_soc=True):
        g_mat = self.calc_g(kpt)
        self.g_mat = g_mat
        h = self.H_wo_g * g_mat
        h = np.sum(h, axis=0)
        if l_soc == True:
            if scipy:
                h = block_diag(*(2 * [h]))
            else:
                h = np.kron(h, np.eye(2)) + self.soc_mat

        return h

    def _sol_ham(self, ham, eig_vectors=False, spin=False):
        ham_use = ham
        if np.max(ham_use - ham_use.T.conj()) > 1.0e-9:
            raise Exception("\n\nHamiltonian matrix is not hermitian?!")
        if eig_vectors == False:
            if scipy:
                ham_use_scipy = sparse.csr_matrix(ham_use)
                eval = eigh(ham_use_scipy, eig_vectors=False)
            else:
                eval = np.linalg.eigvalsh(ham_use)
            eval = self.clean_eig(eval)
            return np.array(eval, dtype=float)
        else:
            (eval, eig) = np.linalg.eigh(ham_use)
            eig = eig.T
            (eval, eig) = self.clean_eig(eval, eig)
            return eval, eig

    def solve_kpath(self, k_list=None, eig_vectors=False, soc=True, parallel=1):
        """ solve along a give k path 
			k_list: list of k points (can be generated by get_kpts)
			returns:
			eig:
			eig_vectors: spits out the eigvectors in the format [band*2,kpoint,orbital] (bands*2 for spins)
			parallel: 0 No parallelization (parallelized over k) 
					  1 Parallelized over k
					  2 parallelized using jit optimization (work in progress donot use)
	"""

        if parallel == 2:
            raise Exception("\n\nparallel=2 not ready yet. please use parallel=1")
        # from .jit_modules import solve_ham_jit
        # if not (k_list is None):
        # 	nkp = len(k_list)
        # 	ham_list = []
        # 	if soc == True:
        # 		ret_eval = np.zeros((self.n_orbitals * 2, nkp), dtype=np.float64)
        # 		ret_evec = np.zeros(
        # 			(self.n_orbitals * 2, nkp, self.n_orbitals * 2), dtype=complex
        # 		)
        # 	else:
        # 		print(2)
        # 		ret_eval = np.zeros((self.n_orbitals, nkp), dtype=np.float64)
        # 		ret_evec = np.zeros((self.n_orbitals, nkp, self.n_orbitals), dtype=complex)
        # 	for i, k in enumerate(k_list):
        # 		ham = self.get_ham(k, l_soc=soc)
        # 		ham_list.append(ham)
        # 		ret_eval, ret_evec = solve_ham_jit(
        # 			ham_list, eig_vectors, self.n_orbitals
        # 		)
        # 	if eig_vectors == False:
        # 		# indices of eval are [band,kpoint]
        # 		return ret_eval
        # 	else:
        # 		# indices of eval are [band,kpoint] for evec are [band,kpoint,orbital,(spin)]
        # 		return (ret_eval, ret_evec)
        if parallel == 1:
            if not (k_list is None):
                nkp = len(k_list)
                ret_eval = np.zeros((self.n_orbitals * 2, nkp), dtype=np.float64)
                ret_evec = np.zeros((self.n_orbitals * 2, nkp, self.n_orbitals * 2), dtype=complex)
                num_cores = multiprocessing.cpu_count()
                if eig_vectors == False:
                    eval = Parallel(n_jobs=num_cores)(
                        delayed(parallel_solove_eval)(i, self, soc) for i in k_list
                    )
                    for i, e in enumerate(eval):
                        ret_eval[:, i] = e
                    # indices of eval are [band,kpoint]
                    return ret_eval
                else:
                    (evals, evecs) = zip(
                        *Parallel(n_jobs=num_cores)(
                            delayed(parallel_solove_eval_and_evec)(i, self, soc) for i in k_list
                        )
                    )
                    for i in range(len(evals)):
                        ret_eval[:, i] = evals[i][:]
                        ret_evec[:, i, :] = evecs[i][:, :]
                    # indices of eval are [band,kpoint] for evec are [band,kpoint,orbital,(spin)]
                    return (ret_eval, ret_evec)

        if parallel == 0:
            if not (k_list is None):

                nkp = len(k_list)
                if soc == True:
                    ret_eval = np.zeros((self.n_orbitals * 2, nkp), dtype=float)
                    ret_evec = np.zeros(
                        (self.n_orbitals * 2, nkp, self.n_orbitals * 2), dtype=complex
                    )
                else:
                    print(2)
                    ret_eval = np.zeros((self.n_orbitals, nkp), dtype=float)
                    ret_evec = np.zeros((self.n_orbitals, nkp, self.n_orbitals), dtype=complex)
                for i, k in enumerate(k_list):
                    ham = self.get_ham(k, l_soc=soc)
                    if eig_vectors == False:
                        eval = self._sol_ham(ham, eig_vectors=eig_vectors)
                        ret_eval[:, i] = eval[:]
                    else:
                        (eval, evec) = self._sol_ham(ham, eig_vectors=eig_vectors)
                        ret_eval[:, i] = eval[:]
                        ret_evec[:, i, :] = evec[:, :]
                if eig_vectors == False:
                    # indices of eval are [band,kpoint]
                    return ret_eval
                else:
                    # indices of eval are [band,kpoint] for evec are [band,kpoint,orbital,(spin)]
                    return (ret_eval, ret_evec)

    def solve_k(self, k_point=None, eig_vectors=False):
        if not (k_point is None):
            if eig_vectors == False:
                eval = self.solve_kpath([k_point], eig_vectors=eig_vectors)
                # indices of eval are [band]
                return eval[:, 0]
            else:
                (eval, evec) = self.solve_kpath([k_point], eig_vectors=eig_vectors)
                # indices of eval are [band] for evec are [band,orbital,spin]
                return (eval[:, 0], evec[:, 0, :])

    def clean_eig(self, eval, eig=None):
        eval = np.array(eval.real, dtype=float)
        args = eval.argsort()
        eval = eval[args]
        if not (eig is None):
            eig = eig[args]
            return (eval, eig)
        return eval

    def get_dos(self, energy, eig=None, w=1e-2, nk=[20, 20, 20]):
        """
		energy: energy range to get the DOS 
		eig: could passs the energy eig values (useful if the system is 2D or want to generate your own k mesh)
		nk: k point sampling 1x3 for x,y,z directions
		w: gaussian width
		"""
        if eig != None:
            E = eig
        else:
            kx = np.linspace(0, 1, nk[0])
            ky = np.linspace(0, 1, nk[1])
            kz = np.linspace(0, 1, nk[2])
            E = []
            for i in kx:
                for j in ky:
                    for k in kz:
                        E.append(self.solve_k([i, j, k]))
        D = 0
        for i in np.array(E).flatten():
            D = D + np.exp(-((energy - i) ** 2) / (2 * w ** 2)) / (np.pi * w * np.sqrt(2))
        return D

    def get_kpts(self, path, nk):
        return self.system.get_kpts(path, nk)

    def k_cart2red(self, k):
        red2cart = np.array(
            [self.structure.get_lattice()[i][: len(k)] for i in range(len(k))]
        ).transpose()
        cart2red = np.linalg.inv(red2cart)
        return cart2red @ np.array(k)

    def k_red2cart(self, k):
        red2cart = np.array(
            [self.structure.get_lattice()[i][: len(k)] for i in range(len(k))]
        ).transpose()
        cart2red = np.linalg.inv(red2cart)
        return red2cart @ np.array(k)

    def calc_g(self, kpt):
        """ calc g mat as func of bond matrix, dist_mat_vec, and k
			g mat is phase factor
		"""
        rec_lat = self.system.structure.lattice.get_rec_lattice()
        kpt_cart = np.dot(kpt, rec_lat)
        g_mat = np.zeros(
            (self.system.structure.max_image, self.n_orbitals, self.n_orbitals), dtype=complex
        )

        # dist_mat_vec = self.system.structure.dist_mat_vec
        # bond_mat = self.system.structure.bond_mat
        dist_mat_vec = self.dist_mat_vec
        bond_mat = self.bond_mat
        if self.numba:
            g_mat = get_gmat_jit(
                g_mat,
                self.system.all_iter,
                self.system.structure.max_image,
                self.n_orbitals,
                bond_mat,
                dist_mat_vec,
                kpt_cart,
            )
        else:
            for ind_1, (atom_1_i, orbit_1_i, element_1, orbit_1) in enumerate(
                self.system.all_iter
            ):
                for ind_2, (atom_2_i, orbit_2_i, element_2, orbit_2) in enumerate(
                    self.system.all_iter
                ):
                    for image_ind in range(self.system.structure.max_image):
                        if bond_mat[image_ind, atom_1_i, atom_2_i] == 0:
                            continue
                        dist_vec = dist_mat_vec[image_ind, atom_1_i, atom_2_i, :]

                        phase = np.exp(2.0 * np.pi * 1j * np.dot(kpt_cart, dist_vec))
                        g_mat[image_ind, ind_1, ind_2] = phase
            # non-translated image_ind is self.system.structure.max_image/2
            g_mat[int(self.system.structure.max_image / 2), :, :] += np.eye(
                self.n_orbitals, dtype=complex
            )
        return g_mat

    def total_energy(self, filled_band=0, nk=10, dim=3, soc=True):
        return energitics.get_totalenergy(
            deepcopy(self), filled_band=filled_band, nk=nk, dim=dim, soc=soc
        )

    def plot_kproj(self, evals, vecs, k_dist, index, ax=None, cmap="bwr"):
        """ plots band structure projected on to subbands
		vecs: eigenvecs in format [band*2,kpoint,orbital] (bands*2 for spins)
		evals: eigen values
		k_dist: distance between k points
		index: orbital index to plot the projection on
		ax: axis object to plot it on
		cmap: colormap value
		
		example :
		evals,vecs=ham.solve_kpath(k_path, eig_vectors=True)
		fig,ax=plt.subplots()
		ham.plot_kproj(evals,vecs,k_dist,index=[0,1],ax=ax)
		
		"""
        index_nums = index
        colors = []
        for j in range(vecs.shape[0]):
            col = []
            for i in range(len(k_dist)):
                col.append(np.linalg.norm(vecs[j, i, :][index_nums], ord=2))
            colors.append(col)

        from matplotlib.collections import LineCollection
        import matplotlib.pyplot as plt
        from matplotlib.colors import ListedColormap, BoundaryNorm

        def make_segments(x, y):
            """
			Create list of line segments from x and y coordinates, in the correct format for LineCollection:
			an array of the form   numlines x (points per line) x 2 (x and y) array
			"""

            points = np.array([x, y]).T.reshape(-1, 1, 2)
            segments = np.concatenate([points[:-1], points[1:]], axis=1)

            return segments

        def clear_frame(ax=None):
            # Taken from a post by Tony S Yu
            if ax is None:
                ax = plt.gca()
            ax.xaxis.set_visible(False)
            ax.yaxis.set_visible(False)
            for spine in ax.spines.itervalues():
                spine.set_visible(False)

        def colorline(
            x,
            y,
            z=None,
            cmap=plt.get_cmap(cmap),
            norm=plt.Normalize(0.0, 1.0),
            linewidth=2,
            alpha=1.0,
        ):
            """
			Plot a colored line with coordinates x and y
			Optionally specify colors in the array z
			Optionally specify a colormap, a norm function and a line width
			"""

            # Default colors equally spaced on [0,1]:
            if z is None:
                z = np.linspace(0.0, 1.0, len(x))

            # Special case if a single number:
            if not hasattr(z, "__iter__"):  # to check for numerical input -- this is a hack
                z = np.array([z])

            z = np.asarray(z)

            segments = make_segments(x, y)
            lc = LineCollection(
                segments, array=z, cmap=cmap, norm=norm, linewidth=linewidth, alpha=alpha
            )

            ax = plt.gca()
            ax.add_collection(lc)

            return lc

        x = k_dist
        for i in range(vecs.shape[0]):

            y = evals[i]

            colorline(x, y, z=colors[i], alpha=1)

        ax.set_xlim(x.min(), x.max())
        ax.set_ylim(evals.min(), evals.max())
        ax.axhline(0, c="k", linestyle=":", linewidth=1)
        # ax.axvline(0.5,c="k",linestyle=":",linewidth=1)
        return ax

    def calc_ham_wo_k(self):
        """ calc hamiltonian with out k
			all g factor is set to 1
		"""

        def get_dir_cos(dist_vec):
            """ return directional cos of distance vector """
            if np.linalg.norm(dist_vec) == 0:
                return 0.0, 0.0, 0.0
            else:
                return dist_vec / np.linalg.norm(dist_vec)

        def get_ind(atom_1_i, orbit_1_i, element_1, orbit_1):
            return self.system.all_iter.index((atom_1_i, orbit_1_i, element_1, orbit_1))

        # params = self.system.params

        # TODO spin interactions

        # off-diagonal
        bond_mat = self.system.structure.bond_mat

        for atom_1_i, atom_1 in enumerate(self.system.structure.atoms):
            for atom_2_i, atom_2 in enumerate(self.system.structure.atoms):
                for image_ind in range(self.system.structure.max_image):
                    if image_ind == self.system.structure.max_image / 2 and atom_1_i == atom_2_i:
                        continue

                    if bond_mat[image_ind, atom_1_i, atom_2_i] == 0:
                        continue
                    param_element = self.system.get_hop_params(atom_1_i, atom_2_i, image_ind)

                    # get direction cosines
                    l, m, n = self.system.structure.get_dir_cos(image_ind, atom_1_i, atom_2_i)
                    param_lmn = dict({"l": l, "m": m, "n": n,})
                    param_element.update(param_lmn)
                    hop_int_pair = get_hop_int(**param_element)

                    for orbit_1_i, orbit_1 in enumerate(atom_1.orbitals):
                        for orbit_2_i, orbit_2 in enumerate(atom_2.orbitals):
                            hop_int_ = hop_int_pair[Hamiltonian.get_orb_ind(orbit_1)][
                                Hamiltonian.get_orb_ind(orbit_2)
                            ]
                            ind_1 = get_ind(atom_1_i, orbit_1_i, atom_1.element, orbit_1)
                            ind_2 = get_ind(atom_2_i, orbit_2_i, atom_2.element, orbit_2)
                            self.H_wo_g[image_ind, ind_1, ind_2] = hop_int_

        # real hermitian -> symmetric
        # self.H_wo_g += np.transpose(self.H_wo_g, [0, 2, 1])#[range(self.H_wo_g.shape[0])[::-1],:,:]

        # diagonal
        H_ind = 0
        for atom_i, atom in enumerate(self.system.structure.atoms):
            len_orbitals = len(atom.orbitals)
            # assert len_orbitals == 10, 'now # of orbitals == {}'.format(len(atom.orbitals))

            onsite_i = self.system.get_onsite_term(atom_i)

            self.H_wo_g[
                int(self.system.structure.max_image / 2),
                H_ind : H_ind + len_orbitals,
                H_ind : H_ind + len_orbitals,
            ] = onsite_i
            H_ind += len_orbitals

